'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
hop API
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
penAPI spec version: 17.8


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *


var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _AuthRequestModel = require('../models/AuthRequestModel');

var _AuthRequestModel2 = _interopRequireDefault(_AuthRequestModel);

var _BasketsResultModel = require('../models/BasketsResultModel');

var _BasketsResultModel2 = _interopRequireDefault(_BasketsResultModel);

var _CustomerAddressModel = require('../models/CustomerAddressModel');

var _CustomerAddressModel2 = _interopRequireDefault(_CustomerAddressModel);

var _CustomerAddressResultModel = require('../models/CustomerAddressResultModel');

var _CustomerAddressResultModel2 = _interopRequireDefault(_CustomerAddressResultModel);

var _CustomerModel = require('../models/CustomerModel');

var _CustomerModel2 = _interopRequireDefault(_CustomerModel);

var _CustomerOrderResultModel = require('../models/CustomerOrderResultModel');

var _CustomerOrderResultModel2 = _interopRequireDefault(_CustomerOrderResultModel);

var _CustomerPaymentInstrumentModel = require('../models/CustomerPaymentInstrumentModel');

var _CustomerPaymentInstrumentModel2 = _interopRequireDefault(_CustomerPaymentInstrumentModel);

var _CustomerPaymentInstrumentRequestModel = require('../models/CustomerPaymentInstrumentRequestModel');

var _CustomerPaymentInstrumentRequestModel2 = _interopRequireDefault(_CustomerPaymentInstrumentRequestModel);

var _CustomerPaymentInstrumentResultModel = require('../models/CustomerPaymentInstrumentResultModel');

var _CustomerPaymentInstrumentResultModel2 = _interopRequireDefault(_CustomerPaymentInstrumentResultModel);

var _CustomerProductListItemModel = require('../models/CustomerProductListItemModel');

var _CustomerProductListItemModel2 = _interopRequireDefault(_CustomerProductListItemModel);

var _CustomerProductListItemResultModel = require('../models/CustomerProductListItemResultModel');

var _CustomerProductListItemResultModel2 = _interopRequireDefault(_CustomerProductListItemResultModel);

var _CustomerProductListModel = require('../models/CustomerProductListModel');

var _CustomerProductListModel2 = _interopRequireDefault(_CustomerProductListModel);

var _CustomerProductListResultModel = require('../models/CustomerProductListResultModel');

var _CustomerProductListResultModel2 = _interopRequireDefault(_CustomerProductListResultModel);

var _CustomerRegistrationModel = require('../models/CustomerRegistrationModel');

var _CustomerRegistrationModel2 = _interopRequireDefault(_CustomerRegistrationModel);

var _PasswordChangeRequestModel = require('../models/PasswordChangeRequestModel');

var _PasswordChangeRequestModel2 = _interopRequireDefault(_PasswordChangeRequestModel);

var _PasswordResetModel = require('../models/PasswordResetModel');

var _PasswordResetModel2 = _interopRequireDefault(_PasswordResetModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Customers service.
* @module api/CustomersApi
* @version 17.8
*/
var CustomersApi = function () {

  /**
  * Constructs a new CustomersApi.
  * @alias module:api/CustomersApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function CustomersApi(apiClient) {
    _classCallCheck(this, CustomersApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Invalidates the JWT provided in the header.
   * @param {Object} opts Optional parameters
   * @param {String} opts.authorization the JWT token
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  _createClass(CustomersApi, [{
    key: 'deleteCustomersAuthWithHttpInfo',
    value: function deleteCustomersAuthWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {};

      var authNames = ['customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi('/customers/auth', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Invalidates the JWT provided in the header.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization the JWT token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'deleteCustomersAuth',
    value: function deleteCustomersAuth(opts) {
      return this.deleteCustomersAuthWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Deletes a customer&#39;s address by address name.
     * @param {String} customerId the id of the customer to delete the address for
     * @param {String} addressName the name of the address to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'deleteCustomersByIDAddressesByIDWithHttpInfo',
    value: function deleteCustomersByIDAddressesByIDWithHttpInfo(customerId, addressName) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDAddressesByID");
      }

      // verify the required parameter 'addressName' is set
      if (addressName === undefined || addressName === null) {
        throw new Error("Missing the required parameter 'addressName' when calling deleteCustomersByIDAddressesByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'address_name': addressName
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi('/customers/{customer_id}/addresses/{address_name}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Deletes a customer&#39;s address by address name.
     * @param {String} customerId the id of the customer to delete the address for
     * @param {String} addressName the name of the address to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'deleteCustomersByIDAddressesByID',
    value: function deleteCustomersByIDAddressesByID(customerId, addressName) {
      return this.deleteCustomersByIDAddressesByIDWithHttpInfo(customerId, addressName).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Deletes a customer&#39;s payment instrument.
     * @param {String} customerId the id of the customer to delete the payment instrument for
     * @param {String} paymentInstrumentId the id of the payment instrument to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'deleteCustomersByIDPaymentInstrumentsByIDWithHttpInfo',
    value: function deleteCustomersByIDPaymentInstrumentsByIDWithHttpInfo(customerId, paymentInstrumentId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId === undefined || paymentInstrumentId === null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling deleteCustomersByIDPaymentInstrumentsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi('/customers/{customer_id}/payment_instruments/{payment_instrument_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Deletes a customer&#39;s payment instrument.
     * @param {String} customerId the id of the customer to delete the payment instrument for
     * @param {String} paymentInstrumentId the id of the payment instrument to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'deleteCustomersByIDPaymentInstrumentsByID',
    value: function deleteCustomersByIDPaymentInstrumentsByID(customerId, paymentInstrumentId) {
      return this.deleteCustomersByIDPaymentInstrumentsByIDWithHttpInfo(customerId, paymentInstrumentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Deletes a customer product list.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'deleteCustomersByIDProductListsByIDWithHttpInfo',
    value: function deleteCustomersByIDProductListsByIDWithHttpInfo(customerId, listId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDProductListsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteCustomersByIDProductListsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi('/customers/{customer_id}/product_lists/{list_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Deletes a customer product list.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'deleteCustomersByIDProductListsByID',
    value: function deleteCustomersByIDProductListsByID(customerId, listId) {
      return this.deleteCustomersByIDProductListsByIDWithHttpInfo(customerId, listId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Removes an item from a customer product list.
     * @param {String} customerId The id of the owner of the product list
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'deleteCustomersByIDProductListsByIDItemsByIDWithHttpInfo',
    value: function deleteCustomersByIDProductListsByIDItemsByIDWithHttpInfo(customerId, listId, itemId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteCustomersByIDProductListsByIDItemsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi('/customers/{customer_id}/product_lists/{list_id}/items/{item_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Removes an item from a customer product list.
     * @param {String} customerId The id of the owner of the product list
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'deleteCustomersByIDProductListsByIDItemsByID',
    value: function deleteCustomersByIDProductListsByIDItemsByID(customerId, listId, itemId) {
      return this.deleteCustomersByIDProductListsByIDItemsByIDWithHttpInfo(customerId, listId, itemId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Gets a customer.
     * @param {String} customerId The customer id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDWithHttpInfo',
    value: function getCustomersByIDWithHttpInfo(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByID");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Gets a customer.
     * @param {String} customerId The customer id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerModel}
     */

  }, {
    key: 'getCustomersByID',
    value: function getCustomersByID(customerId, opts) {
      return this.getCustomersByIDWithHttpInfo(customerId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Returns a sorted pageable list of all customer addresses in the address book. The default page size is 10  customer addresses. The addresses are sorted so that the preferred address is always sorted first. The remaining  addresses are sorted alphabetically by ID.    When the customer cannot be found CustomerNotFoundException  is thrown in a case of an agent but an empty result list is returned in a case of JWT.
     * @param {String} customerId The customer uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start
     * @param {Number} opts.count
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerAddressResultModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDAddressesWithHttpInfo',
    value: function getCustomersByIDAddressesWithHttpInfo(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDAddresses");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerAddressResultModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/addresses', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Returns a sorted pageable list of all customer addresses in the address book. The default page size is 10  customer addresses. The addresses are sorted so that the preferred address is always sorted first. The remaining  addresses are sorted alphabetically by ID.    When the customer cannot be found CustomerNotFoundException  is thrown in a case of an agent but an empty result list is returned in a case of JWT.
     * @param {String} customerId The customer uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start
     * @param {Number} opts.count
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerAddressResultModel}
     */

  }, {
    key: 'getCustomersByIDAddresses',
    value: function getCustomersByIDAddresses(customerId, opts) {
      return this.getCustomersByIDAddressesWithHttpInfo(customerId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieves a customer&#39;s address by address name.
     * @param {String} customerId the id of the customer to retrieve the address for
     * @param {String} addressName the name of the address to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerAddressModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDAddressesByIDWithHttpInfo',
    value: function getCustomersByIDAddressesByIDWithHttpInfo(customerId, addressName) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDAddressesByID");
      }

      // verify the required parameter 'addressName' is set
      if (addressName === undefined || addressName === null) {
        throw new Error("Missing the required parameter 'addressName' when calling getCustomersByIDAddressesByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'address_name': addressName
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerAddressModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/addresses/{address_name}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Retrieves a customer&#39;s address by address name.
     * @param {String} customerId the id of the customer to retrieve the address for
     * @param {String} addressName the name of the address to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerAddressModel}
     */

  }, {
    key: 'getCustomersByIDAddressesByID',
    value: function getCustomersByIDAddressesByID(customerId, addressName) {
      return this.getCustomersByIDAddressesByIDWithHttpInfo(customerId, addressName).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Gets the baskets of a customer.
     * @param {String} customerId the id of the customer to retrieve the baskets for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/BasketsResultModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDBasketsWithHttpInfo',
    value: function getCustomersByIDBasketsWithHttpInfo(customerId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDBaskets");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _BasketsResultModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/baskets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Gets the baskets of a customer.
     * @param {String} customerId the id of the customer to retrieve the baskets for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/BasketsResultModel}
     */

  }, {
    key: 'getCustomersByIDBaskets',
    value: function getCustomersByIDBaskets(customerId) {
      return this.getCustomersByIDBasketsWithHttpInfo(customerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Returns a pageable list of all customer&#39;s orders. The default page size is 10.
     * @param {String} customerId the customer uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start
     * @param {Number} opts.count
     * @param {Boolean} opts.crossSites
     * @param {String} opts.from
     * @param {String} opts.until
     * @param {String} opts.status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerOrderResultModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDOrdersWithHttpInfo',
    value: function getCustomersByIDOrdersWithHttpInfo(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDOrders");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'cross-sites': opts['crossSites'],
        'from': opts['from'],
        'until': opts['until'],
        'status': opts['status']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerOrderResultModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/orders', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Returns a pageable list of all customer&#39;s orders. The default page size is 10.
     * @param {String} customerId the customer uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start
     * @param {Number} opts.count
     * @param {Boolean} opts.crossSites
     * @param {String} opts.from
     * @param {String} opts.until
     * @param {String} opts.status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerOrderResultModel}
     */

  }, {
    key: 'getCustomersByIDOrders',
    value: function getCustomersByIDOrders(customerId, opts) {
      return this.getCustomersByIDOrdersWithHttpInfo(customerId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Gets customer payment instruments for an customer.  Can be limited to a specific payment  method by providing query parameter payment_method_id.    When the customer cannot be found CustomerNotFoundException  is thrown in a case of an agent but an empty result list is returned in a case of JWT.
     * @param {String} customerId the id of the customer to retrieve the payment instruments for
     * @param {Object} opts Optional parameters
     * @param {String} opts.paymentMethodId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerPaymentInstrumentResultModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDPaymentInstrumentsWithHttpInfo',
    value: function getCustomersByIDPaymentInstrumentsWithHttpInfo(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDPaymentInstruments");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'payment_method_id': opts['paymentMethodId']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerPaymentInstrumentResultModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/payment_instruments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Gets customer payment instruments for an customer.  Can be limited to a specific payment  method by providing query parameter payment_method_id.    When the customer cannot be found CustomerNotFoundException  is thrown in a case of an agent but an empty result list is returned in a case of JWT.
     * @param {String} customerId the id of the customer to retrieve the payment instruments for
     * @param {Object} opts Optional parameters
     * @param {String} opts.paymentMethodId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerPaymentInstrumentResultModel}
     */

  }, {
    key: 'getCustomersByIDPaymentInstruments',
    value: function getCustomersByIDPaymentInstruments(customerId, opts) {
      return this.getCustomersByIDPaymentInstrumentsWithHttpInfo(customerId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieves a customer&#39;s payment instrument by its id.
     * @param {String} customerId the id of the customer to retrieve the payment instrument for
     * @param {String} paymentInstrumentId the id of the payment instrument to be retrievedCustomer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerPaymentInstrumentModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDPaymentInstrumentsByIDWithHttpInfo',
    value: function getCustomersByIDPaymentInstrumentsByIDWithHttpInfo(customerId, paymentInstrumentId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId === undefined || paymentInstrumentId === null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling getCustomersByIDPaymentInstrumentsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerPaymentInstrumentModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/payment_instruments/{payment_instrument_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Retrieves a customer&#39;s payment instrument by its id.
     * @param {String} customerId the id of the customer to retrieve the payment instrument for
     * @param {String} paymentInstrumentId the id of the payment instrument to be retrievedCustomer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerPaymentInstrumentModel}
     */

  }, {
    key: 'getCustomersByIDPaymentInstrumentsByID',
    value: function getCustomersByIDPaymentInstrumentsByID(customerId, paymentInstrumentId) {
      return this.getCustomersByIDPaymentInstrumentsByIDWithHttpInfo(customerId, paymentInstrumentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Returns all customer product lists.
     * @param {String} customerId The customer id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerProductListResultModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDProductListsWithHttpInfo',
    value: function getCustomersByIDProductListsWithHttpInfo(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductLists");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerProductListResultModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/product_lists', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Returns all customer product lists.
     * @param {String} customerId The customer id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerProductListResultModel}
     */

  }, {
    key: 'getCustomersByIDProductLists',
    value: function getCustomersByIDProductLists(customerId, opts) {
      return this.getCustomersByIDProductListsWithHttpInfo(customerId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Returns a customer product list of the given customer.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerProductListModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDProductListsByIDWithHttpInfo',
    value: function getCustomersByIDProductListsByIDWithHttpInfo(customerId, listId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerProductListModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/product_lists/{list_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Returns a customer product list of the given customer.
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerProductListModel}
     */

  }, {
    key: 'getCustomersByIDProductListsByID',
    value: function getCustomersByIDProductListsByID(customerId, listId, opts) {
      return this.getCustomersByIDProductListsByIDWithHttpInfo(customerId, listId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Returns a pageable list of all items of a customer&#39;s product list. The default page size is 10.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @param {Number} opts.start
     * @param {Number} opts.count
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerProductListItemResultModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDProductListsByIDItemsWithHttpInfo',
    value: function getCustomersByIDProductListsByIDItemsWithHttpInfo(customerId, listId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByIDItems");
      }

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByIDItems");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv'),
        'start': opts['start'],
        'count': opts['count']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerProductListItemResultModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/product_lists/{list_id}/items', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Returns a pageable list of all items of a customer&#39;s product list. The default page size is 10.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @param {Number} opts.start
     * @param {Number} opts.count
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerProductListItemResultModel}
     */

  }, {
    key: 'getCustomersByIDProductListsByIDItems',
    value: function getCustomersByIDProductListsByIDItems(customerId, listId, opts) {
      return this.getCustomersByIDProductListsByIDItemsWithHttpInfo(customerId, listId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Returns an item of a customer product list.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerProductListItemModel} and HTTP response
     */

  }, {
    key: 'getCustomersByIDProductListsByIDItemsByIDWithHttpInfo',
    value: function getCustomersByIDProductListsByIDItemsByIDWithHttpInfo(customerId, listId, itemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getCustomersByIDProductListsByIDItemsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv')
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerProductListItemModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/product_lists/{list_id}/items/{item_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Returns an item of a customer product list.
     * @param {String} customerId The id of the customer to retrieve the product list items for.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to retrieve.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerProductListItemModel}
     */

  }, {
    key: 'getCustomersByIDProductListsByIDItemsByID',
    value: function getCustomersByIDProductListsByIDItemsByID(customerId, listId, itemId, opts) {
      return this.getCustomersByIDProductListsByIDItemsByIDWithHttpInfo(customerId, listId, itemId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Updates a customer.
     * @param {String} customerId the customer id
     * @param {module:models/CustomerModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerModel} and HTTP response
     */

  }, {
    key: 'patchCustomersByIDWithHttpInfo',
    value: function patchCustomersByIDWithHttpInfo(customerId, body) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByID");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByID");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Updates a customer.
     * @param {String} customerId the customer id
     * @param {module:models/CustomerModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerModel}
     */

  }, {
    key: 'patchCustomersByID',
    value: function patchCustomersByID(customerId, body) {
      return this.patchCustomersByIDWithHttpInfo(customerId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Updates a customer&#39;s address by address name.
     * @param {String} customerId the id of the customer to update the address for
     * @param {String} addressName the name of the address to update
     * @param {module:models/CustomerAddressModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerAddressModel} and HTTP response
     */

  }, {
    key: 'patchCustomersByIDAddressesByIDWithHttpInfo',
    value: function patchCustomersByIDAddressesByIDWithHttpInfo(customerId, addressName, body) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDAddressesByID");
      }

      // verify the required parameter 'addressName' is set
      if (addressName === undefined || addressName === null) {
        throw new Error("Missing the required parameter 'addressName' when calling patchCustomersByIDAddressesByID");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDAddressesByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'address_name': addressName
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerAddressModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/addresses/{address_name}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Updates a customer&#39;s address by address name.
     * @param {String} customerId the id of the customer to update the address for
     * @param {String} addressName the name of the address to update
     * @param {module:models/CustomerAddressModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerAddressModel}
     */

  }, {
    key: 'patchCustomersByIDAddressesByID',
    value: function patchCustomersByIDAddressesByID(customerId, addressName, body) {
      return this.patchCustomersByIDAddressesByIDWithHttpInfo(customerId, addressName, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Changes a product list. Changeable properties are the name, description and if the list is public.
     * @param {module:models/CustomerProductListModel} body
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerProductListModel} and HTTP response
     */

  }, {
    key: 'patchCustomersByIDProductListsByIDWithHttpInfo',
    value: function patchCustomersByIDProductListsByIDWithHttpInfo(body, customerId, listId) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDProductListsByID");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDProductListsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling patchCustomersByIDProductListsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerProductListModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/product_lists/{list_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Changes a product list. Changeable properties are the name, description and if the list is public.
     * @param {module:models/CustomerProductListModel} body
     * @param {String} customerId The customer id.
     * @param {String} listId The product list id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerProductListModel}
     */

  }, {
    key: 'patchCustomersByIDProductListsByID',
    value: function patchCustomersByIDProductListsByID(body, customerId, listId) {
      return this.patchCustomersByIDProductListsByIDWithHttpInfo(body, customerId, listId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Updates an item of a customer&#39;s product list.  Considered values from the request body are:    priority: This is the priority of the customer&#39;s product list item.  public: This is the flag whether the customer&#39;s product list item is public.  quantity: used for product item type only. This is the quantity of  the customer&#39;s product list item.  custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property  must correspond to a custom attribute (&lt;CUSTOM_NAME&gt;) defined for ProductListItem.  The value of this property must be valid for the type of custom attribute defined for ProductListItem.
     * @param {String} customerId The id of the owner of the product list.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to update.
     * @param {module:models/CustomerProductListItemModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerProductListItemModel} and HTTP response
     */

  }, {
    key: 'patchCustomersByIDProductListsByIDItemsByIDWithHttpInfo',
    value: function patchCustomersByIDProductListsByIDItemsByIDWithHttpInfo(customerId, listId, itemId, body) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling patchCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling patchCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling patchCustomersByIDProductListsByIDItemsByID");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCustomersByIDProductListsByIDItemsByID");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId,
        'item_id': itemId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerProductListItemModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/product_lists/{list_id}/items/{item_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Updates an item of a customer&#39;s product list.  Considered values from the request body are:    priority: This is the priority of the customer&#39;s product list item.  public: This is the flag whether the customer&#39;s product list item is public.  quantity: used for product item type only. This is the quantity of  the customer&#39;s product list item.  custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property  must correspond to a custom attribute (&lt;CUSTOM_NAME&gt;) defined for ProductListItem.  The value of this property must be valid for the type of custom attribute defined for ProductListItem.
     * @param {String} customerId The id of the owner of the product list.
     * @param {String} listId The id of the product list.
     * @param {String} itemId The id of the product list item to update.
     * @param {module:models/CustomerProductListItemModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerProductListItemModel}
     */

  }, {
    key: 'patchCustomersByIDProductListsByIDItemsByID',
    value: function patchCustomersByIDProductListsByIDItemsByID(customerId, listId, itemId, body) {
      return this.patchCustomersByIDProductListsByIDItemsByIDWithHttpInfo(customerId, listId, itemId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Registers a customer.  The mandatory data are the credentials and profile last name and email.  When using OAuth the password in the request must not be set, otherwise an InvalidPasswordException will be thrown.  When using JWT the password is required.
     * @param {module:models/CustomerRegistrationModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerModel} and HTTP response
     */

  }, {
    key: 'postCustomersWithHttpInfo',
    value: function postCustomersWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomers");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerModel2.default;

      return this.apiClient.callApi('/customers', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Registers a customer.  The mandatory data are the credentials and profile last name and email.  When using OAuth the password in the request must not be set, otherwise an InvalidPasswordException will be thrown.  When using JWT the password is required.
     * @param {module:models/CustomerRegistrationModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerModel}
     */

  }, {
    key: 'postCustomers',
    value: function postCustomers(body) {
      return this.postCustomersWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Obtains a new JWT (JSON Web Token) for a guest or registered  customer. Tokens are returned as a HTTP Authorization:Bearer response  header entry. These kinds of request are supported, as specified by the  type:    Type guest - creates a new guest (non-authenticated) customer  and returns a token for the customer.  Type credentials - authenticates credentials passed in the  HTTP Authorization:Basic request header, returning a token for a  successfully authenticated customer otherwise results in an  AuthenticationFailedException.  Type session - authenticates the customer (anonymous or registered)  on base of dwsid and dwsecuretoken cookies. It returns a token for a  successfully authenticated customer, otherwise results in an  AuthenticationFailedException.  Type refresh - examines the token passed in the HTTP  Authorization:Bearer request header and when valid returns a new token  with an updated expiry time.     For a request of type credentials:    Updates profile attributes for the customer (for example,  \&quot;last-visited\&quot;).  Handles the maximum number of failed login attempts.    For a request of type session:    Does not touch profile attributes for the registered customer (for example,  \&quot;last-visited\&quot;), since this is not a real login.  Returns different tokens for multiple requests with the same session id. Means, there should be  only one call per session.      About JWT The token contains 3 sections:    the header section (specifies token type and algorithm used)  the payload section (contains customer information, client id,  issue and expiration time)  finally the signature section records the token signature.    A token is created and returned to the client whenever a registered  customer logs in (type \&quot;credentials\&quot;) or a guest customer requests it (type  \&quot;guest\&quot;). The token is returned in the response header as   Authorization: Bearer --token--    The client has to include the token in the request header as   Authorization: Bearer --token--   in any follow up request. The server declines any follow up requests  without a token or which cannot be verified based on the token signature  or expiration time. A token nearing its expiration time should be  exchanged for a new one (type \&quot;refresh\&quot;).    See \&quot;API Usage &gt; JWT\&quot; for more details on using JWT as an authentication  mechanism.
     * @param {module:models/AuthRequestModel} body
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization              Authorization:Basic for type credentials             Authorization:Bearer for type refresh
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerModel} and HTTP response
     */

  }, {
    key: 'postCustomersAuthWithHttpInfo',
    value: function postCustomersAuthWithHttpInfo(body, opts) {
      var _this = this;

      var self = this;
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersAuth");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {};

      var authNames = ['client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerModel2.default;

      return this.apiClient.callApi('/customers/auth', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType).then(function (response) {
        _this.apiClient.defaultHeaders['authorization'] = response.response.header.authorization;
        return response;
      });
    }

    /**
     * Obtains a new JWT (JSON Web Token) for a guest or registered  customer. Tokens are returned as a HTTP Authorization:Bearer response  header entry. These kinds of request are supported, as specified by the  type:    Type guest - creates a new guest (non-authenticated) customer  and returns a token for the customer.  Type credentials - authenticates credentials passed in the  HTTP Authorization:Basic request header, returning a token for a  successfully authenticated customer otherwise results in an  AuthenticationFailedException.  Type session - authenticates the customer (anonymous or registered)  on base of dwsid and dwsecuretoken cookies. It returns a token for a  successfully authenticated customer, otherwise results in an  AuthenticationFailedException.  Type refresh - examines the token passed in the HTTP  Authorization:Bearer request header and when valid returns a new token  with an updated expiry time.     For a request of type credentials:    Updates profile attributes for the customer (for example,  \&quot;last-visited\&quot;).  Handles the maximum number of failed login attempts.    For a request of type session:    Does not touch profile attributes for the registered customer (for example,  \&quot;last-visited\&quot;), since this is not a real login.  Returns different tokens for multiple requests with the same session id. Means, there should be  only one call per session.      About JWT The token contains 3 sections:    the header section (specifies token type and algorithm used)  the payload section (contains customer information, client id,  issue and expiration time)  finally the signature section records the token signature.    A token is created and returned to the client whenever a registered  customer logs in (type \&quot;credentials\&quot;) or a guest customer requests it (type  \&quot;guest\&quot;). The token is returned in the response header as   Authorization: Bearer --token--    The client has to include the token in the request header as   Authorization: Bearer --token--   in any follow up request. The server declines any follow up requests  without a token or which cannot be verified based on the token signature  or expiration time. A token nearing its expiration time should be  exchanged for a new one (type \&quot;refresh\&quot;).    See \&quot;API Usage &gt; JWT\&quot; for more details on using JWT as an authentication  mechanism.
     * @param {module:models/AuthRequestModel} body
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization              Authorization:Basic for type credentials             Authorization:Bearer for type refresh
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerModel}
     */

  }, {
    key: 'postCustomersAuth',
    value: function postCustomersAuth(body, opts) {
      return this.postCustomersAuthWithHttpInfo(body, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Creates a new address with the given name for the given customer.
     * @param {String} customerId the id of the customer to create the address for
     * @param {module:models/CustomerAddressModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerAddressModel} and HTTP response
     */

  }, {
    key: 'postCustomersByIDAddressesWithHttpInfo',
    value: function postCustomersByIDAddressesWithHttpInfo(customerId, body) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDAddresses");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDAddresses");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerAddressModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/addresses', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Creates a new address with the given name for the given customer.
     * @param {String} customerId the id of the customer to create the address for
     * @param {module:models/CustomerAddressModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerAddressModel}
     */

  }, {
    key: 'postCustomersByIDAddresses',
    value: function postCustomersByIDAddresses(customerId, body) {
      return this.postCustomersByIDAddressesWithHttpInfo(customerId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     *   Obtains a new agent on behalf token for a registered customer. Token is returned as a HTTP Authorization:Bearer  response header entry.      A token is created and returned to the client whenever an agent with Create_Order_On_Behalf_Of  permission calls the resource for a registered customer.      The token is returned in the response header as Authorization: Bearer --token--.      The client has to include the token in the request header as Authorization: Bearer --token--    in any follow up request, the agent will do on behalf of the customer.    About the order on behalf token      The token contains 3 sections:      the header section (specifies token type and algorithm used)  the payload section (contains customer information, client id, issue and expiration time)  finally the signature section records the token signature.      A token nearing its expiration time should be exchanged for a new one by calling this resource once more.
     * @param {String} customerId specifies the customer to act on behalf of
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerModel} and HTTP response
     */

  }, {
    key: 'postCustomersByIDAuthWithHttpInfo',
    value: function postCustomersByIDAuthWithHttpInfo(customerId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDAuth");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/auth', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     *   Obtains a new agent on behalf token for a registered customer. Token is returned as a HTTP Authorization:Bearer  response header entry.      A token is created and returned to the client whenever an agent with Create_Order_On_Behalf_Of  permission calls the resource for a registered customer.      The token is returned in the response header as Authorization: Bearer --token--.      The client has to include the token in the request header as Authorization: Bearer --token--    in any follow up request, the agent will do on behalf of the customer.    About the order on behalf token      The token contains 3 sections:      the header section (specifies token type and algorithm used)  the payload section (contains customer information, client id, issue and expiration time)  finally the signature section records the token signature.      A token nearing its expiration time should be exchanged for a new one by calling this resource once more.
     * @param {String} customerId specifies the customer to act on behalf of
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerModel}
     */

  }, {
    key: 'postCustomersByIDAuth',
    value: function postCustomersByIDAuth(customerId) {
      return this.postCustomersByIDAuthWithHttpInfo(customerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Starts a password reset process. A password reset token is generated and passed together with the customer  resolved by the id provided as path parameter to a afterPOST hook. The hook  dw.ocapi.shop.customer.password_reset.afterPOST can utilize the provided reset token, for example to send a reset email.
     * @param {String} customerId the id of the customer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'postCustomersByIDPasswordResetWithHttpInfo',
    value: function postCustomersByIDPasswordResetWithHttpInfo(customerId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDPasswordReset");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi('/customers/{customer_id}/password_reset', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Starts a password reset process. A password reset token is generated and passed together with the customer  resolved by the id provided as path parameter to a afterPOST hook. The hook  dw.ocapi.shop.customer.password_reset.afterPOST can utilize the provided reset token, for example to send a reset email.
     * @param {String} customerId the id of the customer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'postCustomersByIDPasswordReset',
    value: function postCustomersByIDPasswordReset(customerId) {
      return this.postCustomersByIDPasswordResetWithHttpInfo(customerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Adds a payment instrument to a customer information.
     * @param {String} customerId the id of the customer
     * @param {module:models/CustomerPaymentInstrumentRequestModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerPaymentInstrumentModel} and HTTP response
     */

  }, {
    key: 'postCustomersByIDPaymentInstrumentsWithHttpInfo',
    value: function postCustomersByIDPaymentInstrumentsWithHttpInfo(customerId, body) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDPaymentInstruments");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDPaymentInstruments");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerPaymentInstrumentModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/payment_instruments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Adds a payment instrument to a customer information.
     * @param {String} customerId the id of the customer
     * @param {module:models/CustomerPaymentInstrumentRequestModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerPaymentInstrumentModel}
     */

  }, {
    key: 'postCustomersByIDPaymentInstruments',
    value: function postCustomersByIDPaymentInstruments(customerId, body) {
      return this.postCustomersByIDPaymentInstrumentsWithHttpInfo(customerId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Creates a customer product list.
     * @param {module:models/CustomerProductListModel} body
     * @param {String} customerId The customer id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerProductListModel} and HTTP response
     */

  }, {
    key: 'postCustomersByIDProductListsWithHttpInfo',
    value: function postCustomersByIDProductListsWithHttpInfo(body, customerId) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDProductLists");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDProductLists");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerProductListModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/product_lists', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Creates a customer product list.
     * @param {String} customerId The customer id.
     * @param {module:models/CustomerProductListModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerProductListModel}
     */

  }, {
    key: 'postCustomersByIDProductLists',
    value: function postCustomersByIDProductLists(customerId, body) {
      return this.postCustomersByIDProductListsWithHttpInfo(body, customerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Adds an item to the customer&#39;s product list. Considered values from the request body are:    type: a valid type, mandatory. This is the type of the item to be added to the customer&#39;s product  list.  priority: This is the priority of the item to be added to the customer&#39;s product list.  public: This is the flag whether the item to be added to the customer&#39;s product list is public.  product_id: a valid product id, used for product item type only. This is the id (sku)  of the product related to the item to be added to the customer&#39;s product list. It is mandatory for  product item type and it must be a valid product id, otherwise  ProductListProductIdMissingException or ProductListProductNotFoundException  will be thrown.  quantity: used for product item type only. This is the quantity of the item to be  added to the customer&#39;s product list.  custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property must correspond to a custom  attribute (&lt;CUSTOM_NAME&gt;) defined for ProductListItem. The value of this property must be valid for the  type of custom attribute defined for ProductListItem.
     * @param {String} customerId The id of the customer - owner of the product list.
     * @param {String} listId The id of the product list
     * @param {module:models/CustomerProductListItemModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CustomerProductListItemModel} and HTTP response
     */

  }, {
    key: 'postCustomersByIDProductListsByIDItemsWithHttpInfo',
    value: function postCustomersByIDProductListsByIDItemsWithHttpInfo(customerId, listId, body) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling postCustomersByIDProductListsByIDItems");
      }

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling postCustomersByIDProductListsByIDItems");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersByIDProductListsByIDItems");
      }

      var pathParams = {
        'customer_id': customerId,
        'list_id': listId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _CustomerProductListItemModel2.default;

      return this.apiClient.callApi('/customers/{customer_id}/product_lists/{list_id}/items', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Adds an item to the customer&#39;s product list. Considered values from the request body are:    type: a valid type, mandatory. This is the type of the item to be added to the customer&#39;s product  list.  priority: This is the priority of the item to be added to the customer&#39;s product list.  public: This is the flag whether the item to be added to the customer&#39;s product list is public.  product_id: a valid product id, used for product item type only. This is the id (sku)  of the product related to the item to be added to the customer&#39;s product list. It is mandatory for  product item type and it must be a valid product id, otherwise  ProductListProductIdMissingException or ProductListProductNotFoundException  will be thrown.  quantity: used for product item type only. This is the quantity of the item to be  added to the customer&#39;s product list.  custom properties in the form c_&lt;CUSTOM_NAME&gt;: the custom property must correspond to a custom  attribute (&lt;CUSTOM_NAME&gt;) defined for ProductListItem. The value of this property must be valid for the  type of custom attribute defined for ProductListItem.
     * @param {String} customerId The id of the customer - owner of the product list.
     * @param {String} listId The id of the product list
     * @param {module:models/CustomerProductListItemModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CustomerProductListItemModel}
     */

  }, {
    key: 'postCustomersByIDProductListsByIDItems',
    value: function postCustomersByIDProductListsByIDItems(customerId, listId, body) {
      return this.postCustomersByIDProductListsByIDItemsWithHttpInfo(customerId, listId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * First the beforePOST hook is called. After that the validation of the   customer information provided in the the password reset document is performed.   Then a password reset token is generated and together with the resolved   customer is passed to a afterPOST hook. The customer resolution is based   on the password reset request type. Both hooks are performed in a single  transaction.  Currently the resolution can be done by email or login. In case of  an email the password reset hook is only executed if one and only one  customer has been identified for that email. In the case that more than  one customers have been identified for the provided email the resource  does nothing.
     * @param {module:models/PasswordResetModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'postCustomersPasswordResetWithHttpInfo',
    value: function postCustomersPasswordResetWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCustomersPasswordReset");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi('/customers/password_reset', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * First the beforePOST hook is called. After that the validation of the   customer information provided in the the password reset document is performed.   Then a password reset token is generated and together with the resolved   customer is passed to a afterPOST hook. The customer resolution is based   on the password reset request type. Both hooks are performed in a single  transaction.  Currently the resolution can be done by email or login. In case of  an email the password reset hook is only executed if one and only one  customer has been identified for that email. In the case that more than  one customers have been identified for the provided email the resource  does nothing.
     * @param {module:models/PasswordResetModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'postCustomersPasswordReset',
    value: function postCustomersPasswordReset(body) {
      return this.postCustomersPasswordResetWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Updates the customer&#39;s password.
     * @param {String} customerId the customer id
     * @param {module:models/PasswordChangeRequestModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: 'putCustomersByIDPasswordWithHttpInfo',
    value: function putCustomersByIDPasswordWithHttpInfo(customerId, body) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling putCustomersByIDPassword");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCustomersByIDPassword");
      }

      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = null;

      return this.apiClient.callApi('/customers/{customer_id}/password', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Updates the customer&#39;s password.
     * @param {String} customerId the customer id
     * @param {module:models/PasswordChangeRequestModel} body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: 'putCustomersByIDPassword',
    value: function putCustomersByIDPassword(customerId, body) {
      return this.putCustomersByIDPasswordWithHttpInfo(customerId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return CustomersApi;
}();

exports.default = CustomersApi;