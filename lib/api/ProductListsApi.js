'use strict'

Object.defineProperty(exports, '__esModule', {
    value: true
})

const _createClass = (function() { function defineProperties(target, props) { for (let i = 0; i < props.length; i++) { const descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) { descriptor.writable = true } Object.defineProperty(target, descriptor.key, descriptor) } } return function(Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps) } if (staticProps) { defineProperties(Constructor, staticProps) } return Constructor } }()) /**
hop API
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: 17.8

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



const _ApiClient = require('../ApiClient')

const _ApiClient2 = _interopRequireDefault(_ApiClient)

const _PublicProductListItemModel = require('../models/PublicProductListItemModel')

const _PublicProductListItemModel2 = _interopRequireDefault(_PublicProductListItemModel)

const _PublicProductListItemResultModel = require('../models/PublicProductListItemResultModel')

const _PublicProductListItemResultModel2 = _interopRequireDefault(_PublicProductListItemResultModel)

const _PublicProductListModel = require('../models/PublicProductListModel')

const _PublicProductListModel2 = _interopRequireDefault(_PublicProductListModel)

const _PublicProductListResultModel = require('../models/PublicProductListResultModel')

const _PublicProductListResultModel2 = _interopRequireDefault(_PublicProductListResultModel)

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : {default: obj} }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function') } }

/**
* Product_lists service.
* @module api/ProductListsApi
* @version 17.8
*/
const ProductListsApi = (function() {

  /**
  * Constructs a new ProductListsApi.
  * @alias module:api/ProductListsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
    function ProductListsApi(apiClient) {
        _classCallCheck(this, ProductListsApi)

        this.apiClient = apiClient || _ApiClient2.default.instance
    }

  /**
   * Retrieves all public product lists as defined by the given search term (email, first name, last name).
   * @param {Object} opts Optional parameters
   * @param {String} opts.email The email address of the customer, the product lists belong to.
   * @param {String} opts.firstname The first name of the customer, the product lists belong to.
   * @param {String} opts.lastname The last name of the customer, the product lists belong to.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PublicProductListResultModel} and HTTP response
   */


    _createClass(ProductListsApi, [{
        key: 'getProductListsWithHttpInfo',
        value: function getProductListsWithHttpInfo(opts) {
            opts = opts || {}
            const postBody = null

            const pathParams = {}
            const queryParams = {
                email: opts.email,
                firstname: opts.firstname,
                lastname: opts.lastname
            }
            const headerParams = {}
            const formParams = {}

            const authNames = ['client_id', 'customers_auth']
            const contentTypes = ['application/json', 'text/xml', 'application/xml']
            const accepts = ['application/json', 'text/xml', 'application/xml']
            const returnType = _PublicProductListResultModel2.default

            return this.apiClient.callApi('/product_lists', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType)
        }

    /**
     * Retrieves all public product lists as defined by the given search term (email, first name, last name).
     * @param {Object} opts Optional parameters
     * @param {String} opts.email The email address of the customer, the product lists belong to.
     * @param {String} opts.firstname The first name of the customer, the product lists belong to.
     * @param {String} opts.lastname The last name of the customer, the product lists belong to.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PublicProductListResultModel}
     */

    }, {
        key: 'getProductLists',
        value: function getProductLists(opts) {
            return this.getProductListsWithHttpInfo(opts).then((response_and_data) => {
                return response_and_data.data
            })
        }

    /**
     * Retrieves a public product list by id.
     * @param {String} listId The id of the list.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PublicProductListModel} and HTTP response
     */

    }, {
        key: 'getProductListsByIDWithHttpInfo',
        value: function getProductListsByIDWithHttpInfo(listId, opts) {
            opts = opts || {}
            const postBody = null

      // verify the required parameter 'listId' is set
            if (listId === undefined || listId === null) {
                throw new Error('Missing the required parameter \'listId\' when calling getProductListsByID')
            }

            const pathParams = {
                list_id: listId
            }
            const queryParams = {
                expand: this.apiClient.buildCollectionParam(opts.expand, 'csv')
            }
            const headerParams = {}
            const formParams = {}

            const authNames = ['client_id', 'customers_auth']
            const contentTypes = ['application/json', 'text/xml', 'application/xml']
            const accepts = ['application/json', 'text/xml', 'application/xml']
            const returnType = _PublicProductListModel2.default

            return this.apiClient.callApi('/product_lists/{list_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType)
        }

    /**
     * Retrieves a public product list by id.
     * @param {String} listId The id of the list.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PublicProductListModel}
     */

    }, {
        key: 'getProductListsByID',
        value: function getProductListsByID(listId, opts) {
            return this.getProductListsByIDWithHttpInfo(listId, opts).then((response_and_data) => {
                return response_and_data.data
            })
        }

    /**
     * Retrieves the items of a public product list.
     * @param {String} listId The id of the list.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PublicProductListItemResultModel} and HTTP response
     */

    }, {
        key: 'getProductListsByIDItemsWithHttpInfo',
        value: function getProductListsByIDItemsWithHttpInfo(listId, opts) {
            opts = opts || {}
            const postBody = null

      // verify the required parameter 'listId' is set
            if (listId === undefined || listId === null) {
                throw new Error('Missing the required parameter \'listId\' when calling getProductListsByIDItems')
            }

            const pathParams = {
                list_id: listId
            }
            const queryParams = {
                expand: this.apiClient.buildCollectionParam(opts.expand, 'csv')
            }
            const headerParams = {}
            const formParams = {}

            const authNames = ['client_id', 'customers_auth']
            const contentTypes = ['application/json', 'text/xml', 'application/xml']
            const accepts = ['application/json', 'text/xml', 'application/xml']
            const returnType = _PublicProductListItemResultModel2.default

            return this.apiClient.callApi('/product_lists/{list_id}/items', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType)
        }

    /**
     * Retrieves the items of a public product list.
     * @param {String} listId The id of the list.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PublicProductListItemResultModel}
     */

    }, {
        key: 'getProductListsByIDItems',
        value: function getProductListsByIDItems(listId, opts) {
            return this.getProductListsByIDItemsWithHttpInfo(listId, opts).then((response_and_data) => {
                return response_and_data.data
            })
        }

    /**
     * Retrieves an item from a public product list.
     * @param {String} listId The id of the list.
     * @param {String} itemId The id of the item.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PublicProductListItemModel} and HTTP response
     */

    }, {
        key: 'getProductListsByIDItemsByIDWithHttpInfo',
        value: function getProductListsByIDItemsByIDWithHttpInfo(listId, itemId, opts) {
            opts = opts || {}
            const postBody = null

      // verify the required parameter 'listId' is set
            if (listId === undefined || listId === null) {
              throw new Error('Missing the required parameter \'listId\' when calling getProductListsByIDItemsByID')
          }

      // verify the required parameter 'itemId' is set
            if (itemId === undefined || itemId === null) {
              throw new Error('Missing the required parameter \'itemId\' when calling getProductListsByIDItemsByID')
          }

            const pathParams = {
              list_id: listId,
              item_id: itemId
          }
            const queryParams = {
              expand: this.apiClient.buildCollectionParam(opts.expand, 'csv')
          }
            const headerParams = {}
            const formParams = {}

            const authNames = ['client_id', 'customers_auth']
            const contentTypes = ['application/json', 'text/xml', 'application/xml']
            const accepts = ['application/json', 'text/xml', 'application/xml']
            const returnType = _PublicProductListItemModel2.default

            return this.apiClient.callApi('/product_lists/{list_id}/items/{item_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType)
        }

    /**
     * Retrieves an item from a public product list.
     * @param {String} listId The id of the list.
     * @param {String} itemId The id of the item.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PublicProductListItemModel}
     */

    }, {
        key: 'getProductListsByIDItemsByID',
        value: function getProductListsByIDItemsByID(listId, itemId, opts) {
          return this.getProductListsByIDItemsByIDWithHttpInfo(listId, itemId, opts).then((response_and_data) => {
              return response_and_data.data
          })
      }
    }])

    return ProductListsApi
}())

exports.default = ProductListsApi
