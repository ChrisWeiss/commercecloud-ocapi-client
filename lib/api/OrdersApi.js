'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
hop API
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: 17.8


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _BasketModel = require('../models/BasketModel');

var _BasketModel2 = _interopRequireDefault(_BasketModel);

var _NoteModel = require('../models/NoteModel');

var _NoteModel2 = _interopRequireDefault(_NoteModel);

var _NotesResultModel = require('../models/NotesResultModel');

var _NotesResultModel2 = _interopRequireDefault(_NotesResultModel);

var _OrderModel = require('../models/OrderModel');

var _OrderModel2 = _interopRequireDefault(_OrderModel);

var _OrderPaymentInstrumentRequestModel = require('../models/OrderPaymentInstrumentRequestModel');

var _OrderPaymentInstrumentRequestModel2 = _interopRequireDefault(_OrderPaymentInstrumentRequestModel);

var _PaymentMethodResultModel = require('../models/PaymentMethodResultModel');

var _PaymentMethodResultModel2 = _interopRequireDefault(_PaymentMethodResultModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Orders service.
* @module api/OrdersApi
* @version 17.8
*/
var OrdersApi = function () {

  /**
  * Constructs a new OrdersApi. 
  * @alias module:api/OrdersApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function OrdersApi(apiClient) {
    _classCallCheck(this, OrdersApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Removes an order note.
   * @param {String} orderNo the id of the order to be modified
   * @param {String} noteId the id of the note to be removed
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderModel} and HTTP response
   */


  _createClass(OrdersApi, [{
    key: 'deleteOrdersByIDNotesByIDWithHttpInfo',
    value: function deleteOrdersByIDNotesByIDWithHttpInfo(orderNo, noteId) {
      var postBody = null;

      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling deleteOrdersByIDNotesByID");
      }

      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteOrdersByIDNotesByID");
      }

      var pathParams = {
        'order_no': orderNo,
        'note_id': noteId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _OrderModel2.default;

      return this.apiClient.callApi('/orders/{order_no}/notes/{note_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Removes an order note.
     * @param {String} orderNo the id of the order to be modified
     * @param {String} noteId the id of the note to be removed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderModel}
     */

  }, {
    key: 'deleteOrdersByIDNotesByID',
    value: function deleteOrdersByIDNotesByID(orderNo, noteId) {
      return this.deleteOrdersByIDNotesByIDWithHttpInfo(orderNo, noteId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Removes a payment instrument of an order.
     * @param {String} orderNo the order number
     * @param {String} paymentInstrumentId the id of the payment instrument to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderModel} and HTTP response
     */

  }, {
    key: 'deleteOrdersByIDPaymentInstrumentsByIDWithHttpInfo',
    value: function deleteOrdersByIDPaymentInstrumentsByIDWithHttpInfo(orderNo, paymentInstrumentId) {
      var postBody = null;

      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling deleteOrdersByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId === undefined || paymentInstrumentId === null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling deleteOrdersByIDPaymentInstrumentsByID");
      }

      var pathParams = {
        'order_no': orderNo,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _OrderModel2.default;

      return this.apiClient.callApi('/orders/{order_no}/payment_instruments/{payment_instrument_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Removes a payment instrument of an order.
     * @param {String} orderNo the order number
     * @param {String} paymentInstrumentId the id of the payment instrument to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderModel}
     */

  }, {
    key: 'deleteOrdersByIDPaymentInstrumentsByID',
    value: function deleteOrdersByIDPaymentInstrumentsByID(orderNo, paymentInstrumentId) {
      return this.deleteOrdersByIDPaymentInstrumentsByIDWithHttpInfo(orderNo, paymentInstrumentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Gets information for an order.
     * @param {String} orderNo the order number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderModel} and HTTP response
     */

  }, {
    key: 'getOrdersByIDWithHttpInfo',
    value: function getOrdersByIDWithHttpInfo(orderNo) {
      var postBody = null;

      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling getOrdersByID");
      }

      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _OrderModel2.default;

      return this.apiClient.callApi('/orders/{order_no}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Gets information for an order.
     * @param {String} orderNo the order number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderModel}
     */

  }, {
    key: 'getOrdersByID',
    value: function getOrdersByID(orderNo) {
      return this.getOrdersByIDWithHttpInfo(orderNo).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieves notes for an order.
     * @param {String} orderNo The id of the order from which you want to retrieve notes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/NotesResultModel} and HTTP response
     */

  }, {
    key: 'getOrdersByIDNotesWithHttpInfo',
    value: function getOrdersByIDNotesWithHttpInfo(orderNo) {
      var postBody = null;

      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling getOrdersByIDNotes");
      }

      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _NotesResultModel2.default;

      return this.apiClient.callApi('/orders/{order_no}/notes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Retrieves notes for an order.
     * @param {String} orderNo The id of the order from which you want to retrieve notes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/NotesResultModel}
     */

  }, {
    key: 'getOrdersByIDNotes',
    value: function getOrdersByIDNotes(orderNo) {
      return this.getOrdersByIDNotesWithHttpInfo(orderNo).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Gets the applicable payment methods for an existing order considering the open payment amount only.
     * @param {String} orderNo the order number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PaymentMethodResultModel} and HTTP response
     */

  }, {
    key: 'getOrdersByIDPaymentMethodsWithHttpInfo',
    value: function getOrdersByIDPaymentMethodsWithHttpInfo(orderNo) {
      var postBody = null;

      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling getOrdersByIDPaymentMethods");
      }

      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _PaymentMethodResultModel2.default;

      return this.apiClient.callApi('/orders/{order_no}/payment_methods', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Gets the applicable payment methods for an existing order considering the open payment amount only.
     * @param {String} orderNo the order number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PaymentMethodResultModel}
     */

  }, {
    key: 'getOrdersByIDPaymentMethods',
    value: function getOrdersByIDPaymentMethods(orderNo) {
      return this.getOrdersByIDPaymentMethodsWithHttpInfo(orderNo).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update an order.   Considered fields for update are status (same status transitions are possible as for dw.order.Order.setStatus(int  status) plus CREATED to FAILED) and custom properties. During the call the correct channel type will be assured to be set for the order  in a successful call. Without agent context the channel type will be storefront otherwise callcenter.
     * @param {String} orderNo the order number
     * @param {module:models/OrderModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderModel} and HTTP response
     */

  }, {
    key: 'patchOrdersByIDWithHttpInfo',
    value: function patchOrdersByIDWithHttpInfo(orderNo, body) {
      var postBody = body;

      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling patchOrdersByID");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchOrdersByID");
      }

      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _OrderModel2.default;

      return this.apiClient.callApi('/orders/{order_no}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update an order.   Considered fields for update are status (same status transitions are possible as for dw.order.Order.setStatus(int  status) plus CREATED to FAILED) and custom properties. During the call the correct channel type will be assured to be set for the order  in a successful call. Without agent context the channel type will be storefront otherwise callcenter.
     * @param {String} orderNo the order number
     * @param {module:models/OrderModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderModel}
     */

  }, {
    key: 'patchOrdersByID',
    value: function patchOrdersByID(orderNo, body) {
      return this.patchOrdersByIDWithHttpInfo(orderNo, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Updates a payment instrument of an order and passes the order and updated payment instrument to the correct  payment authorizeCreditcard or authorize hook.   Details:    The payment instrument is updated with the provided details. The payment method must be applicable for the  order see GET /baskets/{basket_id}/payment_methods, if the payment method is &#39;CREDIT_CARD&#39; a  payment_card must be specified in the request.      Order authorization:      To authorize the order one of two possible customization hooks is called and an  dw.order.OrderPaymentInstrument is passed as an input argument.      Which hook is called?      If the request includes a payment_card or the dw.order.OrderPaymentInstrument  contains a creditCardType the customization hook dw.order.payment.authorizeCreditCard is called.  See dw.order.hooks.PaymentHooks.authorizeCreditCard(order : Order, paymentDetails : OrderPaymentInstrument, cvn : String) : Status.  Otherwise dw.order.payment.authorize is called.  See dw.order.hooks.PaymentHooks.authorize(order : Order, paymentDetails : OrderPaymentInstrument) : Status.      What is the dw.order.OrderPaymentInstrument input argument passed to the hook?      If the request contains a customer_payment_instrument_id the  dw.order.OrderPaymentInstrument is copied from the customer payment instrument (An exception is thrown  if none was found).  Otherwise the data from the request document is passed (payment_card or  payment_bank_account etc. information).      Note: the amount and the security_code (cvn) contained in the  payment_card data will be propagated if available to  dw.order.payment.authorizeCreditCard even if the dw.order.OrderPaymentInstrument is  resolved from a customer payment instrument.      Customization hook dw.ocapi.shop.order.afterPatchPaymentInstrument is called. The default  implementation places the order if the order status is CREATED and the authorization amount equals or exceeds the  order total. Placing the order (equivalent to calling dw.order.OrderMgr.placeOrder(order : Order)  in the scripting API) results in the order being changed to status NEW and prepared for export.  
     * @param {String} orderNo the order number
     * @param {String} paymentInstrumentId the id of the payment instrument to be updated
     * @param {module:models/OrderPaymentInstrumentRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderModel} and HTTP response
     */

  }, {
    key: 'patchOrdersByIDPaymentInstrumentsByIDWithHttpInfo',
    value: function patchOrdersByIDPaymentInstrumentsByIDWithHttpInfo(orderNo, paymentInstrumentId, body) {
      var postBody = body;

      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling patchOrdersByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'paymentInstrumentId' is set
      if (paymentInstrumentId === undefined || paymentInstrumentId === null) {
        throw new Error("Missing the required parameter 'paymentInstrumentId' when calling patchOrdersByIDPaymentInstrumentsByID");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchOrdersByIDPaymentInstrumentsByID");
      }

      var pathParams = {
        'order_no': orderNo,
        'payment_instrument_id': paymentInstrumentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _OrderModel2.default;

      return this.apiClient.callApi('/orders/{order_no}/payment_instruments/{payment_instrument_id}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Updates a payment instrument of an order and passes the order and updated payment instrument to the correct  payment authorizeCreditcard or authorize hook.   Details:    The payment instrument is updated with the provided details. The payment method must be applicable for the  order see GET /baskets/{basket_id}/payment_methods, if the payment method is &#39;CREDIT_CARD&#39; a  payment_card must be specified in the request.      Order authorization:      To authorize the order one of two possible customization hooks is called and an  dw.order.OrderPaymentInstrument is passed as an input argument.      Which hook is called?      If the request includes a payment_card or the dw.order.OrderPaymentInstrument  contains a creditCardType the customization hook dw.order.payment.authorizeCreditCard is called.  See dw.order.hooks.PaymentHooks.authorizeCreditCard(order : Order, paymentDetails : OrderPaymentInstrument, cvn : String) : Status.  Otherwise dw.order.payment.authorize is called.  See dw.order.hooks.PaymentHooks.authorize(order : Order, paymentDetails : OrderPaymentInstrument) : Status.      What is the dw.order.OrderPaymentInstrument input argument passed to the hook?      If the request contains a customer_payment_instrument_id the  dw.order.OrderPaymentInstrument is copied from the customer payment instrument (An exception is thrown  if none was found).  Otherwise the data from the request document is passed (payment_card or  payment_bank_account etc. information).      Note: the amount and the security_code (cvn) contained in the  payment_card data will be propagated if available to  dw.order.payment.authorizeCreditCard even if the dw.order.OrderPaymentInstrument is  resolved from a customer payment instrument.      Customization hook dw.ocapi.shop.order.afterPatchPaymentInstrument is called. The default  implementation places the order if the order status is CREATED and the authorization amount equals or exceeds the  order total. Placing the order (equivalent to calling dw.order.OrderMgr.placeOrder(order : Order)  in the scripting API) results in the order being changed to status NEW and prepared for export.  
     * @param {String} orderNo the order number
     * @param {String} paymentInstrumentId the id of the payment instrument to be updated
     * @param {module:models/OrderPaymentInstrumentRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderModel}
     */

  }, {
    key: 'patchOrdersByIDPaymentInstrumentsByID',
    value: function patchOrdersByIDPaymentInstrumentsByID(orderNo, paymentInstrumentId, body) {
      return this.patchOrdersByIDPaymentInstrumentsByIDWithHttpInfo(orderNo, paymentInstrumentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Submits an order based on a prepared basket.  Note: If the basket has been submitted  using Order Center (considered by it&#39;s client id) the channel type will  be set to \&quot;Call Center\&quot;. In case another channel type was set by a script  before submitting the basket, the channel type will be reset to  \&quot;Call Center\&quot; and a warning will be logged.  The only considered value from the request body is basket_id.
     * @param {module:models/BasketModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderModel} and HTTP response
     */

  }, {
    key: 'postOrdersWithHttpInfo',
    value: function postOrdersWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postOrders");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _OrderModel2.default;

      return this.apiClient.callApi('/orders', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Submits an order based on a prepared basket.  Note: If the basket has been submitted  using Order Center (considered by it&#39;s client id) the channel type will  be set to \&quot;Call Center\&quot;. In case another channel type was set by a script  before submitting the basket, the channel type will be reset to  \&quot;Call Center\&quot; and a warning will be logged.  The only considered value from the request body is basket_id.
     * @param {module:models/BasketModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderModel}
     */

  }, {
    key: 'postOrders',
    value: function postOrders(body) {
      return this.postOrdersWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Adds a note to an existing order.
     * @param {String} orderNo The id of the order to be modified.
     * @param {module:models/NoteModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderModel} and HTTP response
     */

  }, {
    key: 'postOrdersByIDNotesWithHttpInfo',
    value: function postOrdersByIDNotesWithHttpInfo(orderNo, body) {
      var postBody = body;

      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling postOrdersByIDNotes");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postOrdersByIDNotes");
      }

      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _OrderModel2.default;

      return this.apiClient.callApi('/orders/{order_no}/notes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Adds a note to an existing order.
     * @param {String} orderNo The id of the order to be modified.
     * @param {module:models/NoteModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderModel}
     */

  }, {
    key: 'postOrdersByIDNotes',
    value: function postOrdersByIDNotes(orderNo, body) {
      return this.postOrdersByIDNotesWithHttpInfo(orderNo, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Adds a payment instrument to an order. It is possible either to supply the full payment information or only a  customer payment instrument id and amount. In case the customer payment instrument id was set all the other  properties (except amount) are ignored and the payment data is resolved from the stored customer payment  information. An attempt is made to authorize the order by passing it to the authorize or authorizeCreditCard  hook.   Details:    The payment instrument is added with the provided details or the details from the customer payment  instrument. The payment method must be applicable for the order see GET  /baskets/{basket_id}/payment_methods, if the payment method is &#39;CREDIT_CARD&#39; a  payment_card must be specified in the request.      Order authorization:      To authorize the order one of two possible customization hooks is called and an  dw.order.OrderPaymentInstrument is passed as an input argument.      Which hook is called?      If the request includes a payment_card or the dw.order.OrderPaymentInstrument  contains a creditCardType the customization hook dw.order.payment.authorizeCreditCard is called.   See dw.order.hooks.PaymentHooks.authorizeCreditCard(order : Order, paymentDetails : OrderPaymentInstrument, cvn : String) : Status.  Otherwise dw.order.payment.authorize is called. See dw.order.hooks.PaymentHooks.authorize(order : Order, paymentDetails : OrderPaymentInstrument) : Status.      What is the dw.order.OrderPaymentInstrument input argument passed to the hook?      If the request contains a customer_payment_instrument_id the  dw.order.OrderPaymentInstrument is copied from the customer payment instrument (An exception is thrown  if none was found).  Otherwise the data from the request document is passed (payment_card or  payment_bank_account etc. information).      Note: the amount and the security_code (cvn) contained in the  payment_card data will be propagated if available to  dw.order.payment.authorizeCreditCard even if the dw.order.OrderPaymentInstrument is  resolved from a customer payment instrument.      Customization hook dw.ocapi.shop.order.afterPostPaymentInstrument is called. The default  implementation places the order if the order status is CREATED and the authorization amount equals or exceeds the  order total. Placing the order (equivalent to calling dw.order.OrderMgr.placeOrder(order : Order) in the  scripting API) results in the order being changed to status NEW and prepared for export.  
     * @param {String} orderNo the order number
     * @param {module:models/OrderPaymentInstrumentRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderModel} and HTTP response
     */

  }, {
    key: 'postOrdersByIDPaymentInstrumentsWithHttpInfo',
    value: function postOrdersByIDPaymentInstrumentsWithHttpInfo(orderNo, body) {
      var postBody = body;

      // verify the required parameter 'orderNo' is set
      if (orderNo === undefined || orderNo === null) {
        throw new Error("Missing the required parameter 'orderNo' when calling postOrdersByIDPaymentInstruments");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postOrdersByIDPaymentInstruments");
      }

      var pathParams = {
        'order_no': orderNo
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _OrderModel2.default;

      return this.apiClient.callApi('/orders/{order_no}/payment_instruments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Adds a payment instrument to an order. It is possible either to supply the full payment information or only a  customer payment instrument id and amount. In case the customer payment instrument id was set all the other  properties (except amount) are ignored and the payment data is resolved from the stored customer payment  information. An attempt is made to authorize the order by passing it to the authorize or authorizeCreditCard  hook.   Details:    The payment instrument is added with the provided details or the details from the customer payment  instrument. The payment method must be applicable for the order see GET  /baskets/{basket_id}/payment_methods, if the payment method is &#39;CREDIT_CARD&#39; a  payment_card must be specified in the request.      Order authorization:      To authorize the order one of two possible customization hooks is called and an  dw.order.OrderPaymentInstrument is passed as an input argument.      Which hook is called?      If the request includes a payment_card or the dw.order.OrderPaymentInstrument  contains a creditCardType the customization hook dw.order.payment.authorizeCreditCard is called.   See dw.order.hooks.PaymentHooks.authorizeCreditCard(order : Order, paymentDetails : OrderPaymentInstrument, cvn : String) : Status.  Otherwise dw.order.payment.authorize is called. See dw.order.hooks.PaymentHooks.authorize(order : Order, paymentDetails : OrderPaymentInstrument) : Status.      What is the dw.order.OrderPaymentInstrument input argument passed to the hook?      If the request contains a customer_payment_instrument_id the  dw.order.OrderPaymentInstrument is copied from the customer payment instrument (An exception is thrown  if none was found).  Otherwise the data from the request document is passed (payment_card or  payment_bank_account etc. information).      Note: the amount and the security_code (cvn) contained in the  payment_card data will be propagated if available to  dw.order.payment.authorizeCreditCard even if the dw.order.OrderPaymentInstrument is  resolved from a customer payment instrument.      Customization hook dw.ocapi.shop.order.afterPostPaymentInstrument is called. The default  implementation places the order if the order status is CREATED and the authorization amount equals or exceeds the  order total. Placing the order (equivalent to calling dw.order.OrderMgr.placeOrder(order : Order) in the  scripting API) results in the order being changed to status NEW and prepared for export.  
     * @param {String} orderNo the order number
     * @param {module:models/OrderPaymentInstrumentRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderModel}
     */

  }, {
    key: 'postOrdersByIDPaymentInstruments',
    value: function postOrdersByIDPaymentInstruments(orderNo, body) {
      return this.postOrdersByIDPaymentInstrumentsWithHttpInfo(orderNo, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return OrdersApi;
}();

exports.default = OrdersApi;