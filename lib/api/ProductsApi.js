'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
hop API
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: 17.8


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductModel = require('../models/ProductModel');

var _ProductModel2 = _interopRequireDefault(_ProductModel);

var _ProductResultModel = require('../models/ProductResultModel');

var _ProductResultModel2 = _interopRequireDefault(_ProductResultModel);

var _ShippingMethodResultModel = require('../models/ShippingMethodResultModel');

var _ShippingMethodResultModel2 = _interopRequireDefault(_ShippingMethodResultModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Products service.
* @module api/ProductsApi
* @version 17.8
*/
var ProductsApi = function () {

  /**
  * Constructs a new ProductsApi. 
  * @alias module:api/ProductsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ProductsApi(apiClient) {
    _classCallCheck(this, ProductsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * To access single products resource, you construct a URL using the template shown below. This template requires  you to specify an Id (typically a SKU) for a product. In response, the server returns a corresponding Product  document, provided the product is online and assigned to site catalog. The document contains variation attributes  (including values) and the variant matrix; this data is provided for both the master and for the variant.
   * @param {String} id The id of the requested product.
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} opts.expand 
   * @param {Array.<String>} opts.inventoryIds 
   * @param {String} opts.currency 
   * @param {String} opts.locale 
   * @param {Boolean} opts.allImages 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductModel} and HTTP response
   */


  _createClass(ProductsApi, [{
    key: 'getProductsByIDWithHttpInfo',
    value: function getProductsByIDWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv'),
        'inventory_ids': this.apiClient.buildCollectionParam(opts['inventoryIds'], 'csv'),
        'currency': opts['currency'],
        'locale': opts['locale'],
        'all_images': opts['allImages']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ProductModel2.default;

      return this.apiClient.callApi('/products/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * To access single products resource, you construct a URL using the template shown below. This template requires  you to specify an Id (typically a SKU) for a product. In response, the server returns a corresponding Product  document, provided the product is online and assigned to site catalog. The document contains variation attributes  (including values) and the variant matrix; this data is provided for both the master and for the variant.
     * @param {String} id The id of the requested product.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {Array.<String>} opts.inventoryIds 
     * @param {String} opts.currency 
     * @param {String} opts.locale 
     * @param {Boolean} opts.allImages 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductModel}
     */

  }, {
    key: 'getProductsByID',
    value: function getProductsByID(id, opts) {
      return this.getProductsByIDWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Access product availability information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.inventoryIds 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductModel} and HTTP response
     */

  }, {
    key: 'getProductsByIDAvailabilityWithHttpInfo',
    value: function getProductsByIDAvailabilityWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDAvailability");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'inventory_ids': this.apiClient.buildCollectionParam(opts['inventoryIds'], 'csv'),
        'locale': opts['locale']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ProductModel2.default;

      return this.apiClient.callApi('/products/{id}/availability', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Access product availability information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.inventoryIds 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductModel}
     */

  }, {
    key: 'getProductsByIDAvailability',
    value: function getProductsByIDAvailability(id, opts) {
      return this.getProductsByIDAvailabilityWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Access bundled product information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductModel} and HTTP response
     */

  }, {
    key: 'getProductsByIDBundledProductsWithHttpInfo',
    value: function getProductsByIDBundledProductsWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDBundledProducts");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ProductModel2.default;

      return this.apiClient.callApi('/products/{id}/bundled_products', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Access bundled product information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductModel}
     */

  }, {
    key: 'getProductsByIDBundledProducts',
    value: function getProductsByIDBundledProducts(id, opts) {
      return this.getProductsByIDBundledProductsWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Access product image information of products that are online and assigned to site catalog. Filter the result by  view type and variation values.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.viewType 
     * @param {Boolean} opts.allImages 
     * @param {String} opts.variationAttribute 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductModel} and HTTP response
     */

  }, {
    key: 'getProductsByIDImagesWithHttpInfo',
    value: function getProductsByIDImagesWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDImages");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'view_type': this.apiClient.buildCollectionParam(opts['viewType'], 'csv'),
        'all_images': opts['allImages'],
        'variation_attribute': opts['variationAttribute'],
        'locale': opts['locale']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ProductModel2.default;

      return this.apiClient.callApi('/products/{id}/images', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Access product image information of products that are online and assigned to site catalog. Filter the result by  view type and variation values.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.viewType 
     * @param {Boolean} opts.allImages 
     * @param {String} opts.variationAttribute 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductModel}
     */

  }, {
    key: 'getProductsByIDImages',
    value: function getProductsByIDImages(id, opts) {
      return this.getProductsByIDImagesWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Access product link information of products that are online and assigned to site catalog. Filter the result by  link type and link direction.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {String} opts.direction 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductModel} and HTTP response
     */

  }, {
    key: 'getProductsByIDLinksWithHttpInfo',
    value: function getProductsByIDLinksWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDLinks");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'type': opts['type'],
        'direction': opts['direction'],
        'locale': opts['locale']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ProductModel2.default;

      return this.apiClient.callApi('/products/{id}/links', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Access product link information of products that are online and assigned to site catalog. Filter the result by  link type and link direction.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type 
     * @param {String} opts.direction 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductModel}
     */

  }, {
    key: 'getProductsByIDLinks',
    value: function getProductsByIDLinks(id, opts) {
      return this.getProductsByIDLinksWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Access product option information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductModel} and HTTP response
     */

  }, {
    key: 'getProductsByIDOptionsWithHttpInfo',
    value: function getProductsByIDOptionsWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDOptions");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ProductModel2.default;

      return this.apiClient.callApi('/products/{id}/options', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Access product option information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductModel}
     */

  }, {
    key: 'getProductsByIDOptions',
    value: function getProductsByIDOptions(id, opts) {
      return this.getProductsByIDOptionsWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Access product price information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductModel} and HTTP response
     */

  }, {
    key: 'getProductsByIDPricesWithHttpInfo',
    value: function getProductsByIDPricesWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDPrices");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ProductModel2.default;

      return this.apiClient.callApi('/products/{id}/prices', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Access product price information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductModel}
     */

  }, {
    key: 'getProductsByIDPrices',
    value: function getProductsByIDPrices(id, opts) {
      return this.getProductsByIDPricesWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Access product promotion information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductModel} and HTTP response
     */

  }, {
    key: 'getProductsByIDPromotionsWithHttpInfo',
    value: function getProductsByIDPromotionsWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDPromotions");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'currency': opts['currency'],
        'locale': opts['locale']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ProductModel2.default;

      return this.apiClient.callApi('/products/{id}/promotions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Access product promotion information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductModel}
     */

  }, {
    key: 'getProductsByIDPromotions',
    value: function getProductsByIDPromotions(id, opts) {
      return this.getProductsByIDPromotionsWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieves the applicable shipping methods for a certain product.
     * @param {String} id the requested product id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ShippingMethodResultModel} and HTTP response
     */

  }, {
    key: 'getProductsByIDShippingMethodsWithHttpInfo',
    value: function getProductsByIDShippingMethodsWithHttpInfo(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDShippingMethods");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['customers_auth', 'oauth2_application'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ShippingMethodResultModel2.default;

      return this.apiClient.callApi('/products/{id}/shipping_methods', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Retrieves the applicable shipping methods for a certain product.
     * @param {String} id the requested product id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ShippingMethodResultModel}
     */

  }, {
    key: 'getProductsByIDShippingMethods',
    value: function getProductsByIDShippingMethods(id) {
      return this.getProductsByIDShippingMethodsWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Access product variation information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductModel} and HTTP response
     */

  }, {
    key: 'getProductsByIDVariationsWithHttpInfo',
    value: function getProductsByIDVariationsWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductsByIDVariations");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ProductModel2.default;

      return this.apiClient.callApi('/products/{id}/variations', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Access product variation information of products that are online and assigned to site catalog.
     * @param {String} id The requested product id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductModel}
     */

  }, {
    key: 'getProductsByIDVariations',
    value: function getProductsByIDVariations(id, opts) {
      return this.getProductsByIDVariationsWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * @param {Array.<String>} ids 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {Array.<String>} opts.inventoryIds 
     * @param {String} opts.currency 
     * @param {String} opts.locale 
     * @param {Boolean} opts.allImages 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductResultModel} and HTTP response
     */

  }, {
    key: 'getProductsByIDsWithHttpInfo',
    value: function getProductsByIDsWithHttpInfo(ids, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getProductsByIDs");
      }

      var pathParams = {
        'ids': ids
      };
      var queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'csv'),
        'inventory_ids': this.apiClient.buildCollectionParam(opts['inventoryIds'], 'csv'),
        'currency': opts['currency'],
        'locale': opts['locale'],
        'all_images': opts['allImages']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['client_id', 'customers_auth'];
      var contentTypes = ['application/json', 'text/xml', 'application/xml'];
      var accepts = ['application/json', 'text/xml', 'application/xml'];
      var returnType = _ProductResultModel2.default;

      return this.apiClient.callApi('/products/({ids})', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * @param {Array.<String>} ids 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.expand 
     * @param {Array.<String>} opts.inventoryIds 
     * @param {String} opts.currency 
     * @param {String} opts.locale 
     * @param {Boolean} opts.allImages 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductResultModel}
     */

  }, {
    key: 'getProductsByIDs',
    value: function getProductsByIDs(ids, opts) {
      return this.getProductsByIDsWithHttpInfo(ids, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return ProductsApi;
}();

exports.default = ProductsApi;