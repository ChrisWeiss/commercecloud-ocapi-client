'use strict'

Object.defineProperty(exports, '__esModule', {
    value: true
})

const _createClass = (function() { function defineProperties(target, props) { for (let i = 0; i < props.length; i++) { const descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) { descriptor.writable = true } Object.defineProperty(target, descriptor.key, descriptor) } } return function(Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps) } if (staticProps) { defineProperties(Constructor, staticProps) } return Constructor } }()) /**
hop API
o description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

penAPI spec version: 17.8


his class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
o not edit the class manually.



const _ApiClient = require('../ApiClient')

const _ApiClient2 = _interopRequireDefault(_ApiClient)

const _ContentFolderModel = require('../models/ContentFolderModel')

const _ContentFolderModel2 = _interopRequireDefault(_ContentFolderModel)

const _ContentFolderResultModel = require('../models/ContentFolderResultModel')

const _ContentFolderResultModel2 = _interopRequireDefault(_ContentFolderResultModel)

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : {default: obj} }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function') } }

/**
* Folders service.
* @module api/FoldersApi
* @version 17.8
*/
const FoldersApi = (function() {

  /**
  * Constructs a new FoldersApi.
  * @alias module:api/FoldersApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
    function FoldersApi(apiClient) {
        _classCallCheck(this, FoldersApi)

        this.apiClient = apiClient || _ApiClient2.default.instance
    }

  /**
   * To access a content folder, you construct a URL using the template shown below. This template requires you to  specify a content folder id and a subfolder level. In response, the server returns a corresponding content  folder document. Only content folder, which are marked as online are returned.
   * @param {String} id The id of the requested content folder.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.levels
   * @param {String} opts.locale
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContentFolderModel} and HTTP response
   */


    _createClass(FoldersApi, [{
        key: 'getFoldersByIDWithHttpInfo',
        value: function getFoldersByIDWithHttpInfo(id, opts) {
            opts = opts || {}
            const postBody = null

      // verify the required parameter 'id' is set
            if (id === undefined || id === null) {
                throw new Error('Missing the required parameter \'id\' when calling getFoldersByID')
            }

            const pathParams = {
                id
            }
            const queryParams = {
                levels: opts.levels,
                locale: opts.locale
            }
            const headerParams = {}
            const formParams = {}

            const authNames = ['client_id', 'customers_auth']
            const contentTypes = ['application/json', 'text/xml', 'application/xml']
            const accepts = ['application/json', 'text/xml', 'application/xml']
            const returnType = _ContentFolderModel2.default

            return this.apiClient.callApi('/folders/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType)
        }

    /**
     * To access a content folder, you construct a URL using the template shown below. This template requires you to  specify a content folder id and a subfolder level. In response, the server returns a corresponding content  folder document. Only content folder, which are marked as online are returned.
     * @param {String} id The id of the requested content folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels
     * @param {String} opts.locale
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContentFolderModel}
     */

    }, {
        key: 'getFoldersByID',
        value: function getFoldersByID(id, opts) {
            return this.getFoldersByIDWithHttpInfo(id, opts).then((response_and_data) => {
                return response_and_data.data
            })
        }

    /**
     * @param {Array.<String>} ids
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels
     * @param {String} opts.locale
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContentFolderResultModel} and HTTP response
     */

    }, {
        key: 'getFoldersByIDsWithHttpInfo',
        value: function getFoldersByIDsWithHttpInfo(ids, opts) {
            opts = opts || {}
            const postBody = null

      // verify the required parameter 'ids' is set
            if (ids === undefined || ids === null) {
                throw new Error('Missing the required parameter \'ids\' when calling getFoldersByIDs')
            }

            const pathParams = {
                ids
            }
            const queryParams = {
                levels: opts.levels,
                locale: opts.locale
            }
            const headerParams = {}
            const formParams = {}

            const authNames = ['client_id', 'customers_auth']
            const contentTypes = ['application/json', 'text/xml', 'application/xml']
            const accepts = ['application/json', 'text/xml', 'application/xml']
            const returnType = _ContentFolderResultModel2.default

            return this.apiClient.callApi('/folders/({ids})', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType)
        }

    /**
     * @param {Array.<String>} ids
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels
     * @param {String} opts.locale
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContentFolderResultModel}
     */

    }, {
        key: 'getFoldersByIDs',
        value: function getFoldersByIDs(ids, opts) {
            return this.getFoldersByIDsWithHttpInfo(ids, opts).then((response_and_data) => {
                return response_and_data.data
            })
        }
    }])

    return FoldersApi
}())

exports.default = FoldersApi
