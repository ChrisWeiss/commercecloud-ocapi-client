/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 17.8
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD.
        define(['expect.js', '../../src/index'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        factory(require('expect.js'), require('../../src/index'));
    } else {
        // Browser globals (root is window)
        factory(root.expect, root.ShopApi);
    }
}(this, function(expect, ShopApi) {
    'use strict'

    var instance

    beforeEach(() => {
        instance = new ShopApi.StoresApi();

        const defaultClient = ShopApi.ApiClient.instance
        defaultClient.defaultHeaders = {
            'x-dw-client-id': '5640cc6b-f5e9-466e-9134-9853e9f9db93'
        }
        defaultClient.basePath = 'https://thingproxy.freeboard.io/fetch/https://mobify-tech-prtnr-na03-dw.demandware.net/s/2017refresh/dw/shop/v17_8'.replace(/\/+$/, '')
    })

    const getProperty = (object, getter, property) => {
        // Use getter method if present; otherwise, get the property directly.
        if (typeof object[getter] === 'function')
            return object[getter]()
        else
            return object[property]
    }

    const setProperty = (object, setter, property, value) => {
        // Use setter method if present; otherwise, set the property directly.
        if (typeof object[setter] === 'function')
            object[setter](value)
        else
            object[property] = value
    }

    describe('StoresApi', () => {

        describe('getStores', () => {
            it('should call getStores successfully', () =>
                instance.getStores({countryCode: 'US', postalCode: '90210'})
                    .catch((error) => {
                        throw error
                    })
            )

            it('call getStores without country code expects error', () =>
                instance.getStores({postalCode: '90210'})
                    .catch((fault) => {
                        expect(fault.type).to.be('MissingCountryCodeException')
                    })
            )

            it('call getStores without postal code expects error', () =>
                instance.getStores({countryCode: 'US'})
                    .catch((fault) => {
                        expect(fault.type).to.be('MissingPostalCodeException')
                    })
            )
        })

        describe('getStoresByID', () => {
            it('should call getStoresByID successfully', (done) => {
                //uncomment below and update the code to test getStoresByID
                //instance.getStoresByID(function(error) {
                //  if (error) throw error;
                //expect().to.be();
                //});
                done()
            })
        })

        describe('getStoresByIDs', () => {
            it('should call getStoresByIDs successfully', (done) => {
                //uncomment below and update the code to test getStoresByIDs
                //instance.getStoresByIDs(function(error) {
                //  if (error) throw error;
                //expect().to.be();
                //});
                done()
            })
        })

    })
}))
