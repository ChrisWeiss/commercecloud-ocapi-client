/**
 * Shop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 17.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContentFolderModel from '../models/ContentFolderModel'
import ContentFolderResultModel from '../models/ContentFolderResultModel'

/**
* Folders service.
* @module api/FoldersApi
* @version 17.8
*/
export default class FoldersApi {

    /**
    * Constructs a new FoldersApi. 
    * @alias module:api/FoldersApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance
    }



    /**
     * To access a content folder, you construct a URL using the template shown below. This template requires you to  specify a content folder id and a subfolder level. In response, the server returns a corresponding content  folder document. Only content folder, which are marked as online are returned.
     * @param {String} id The id of the requested content folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContentFolderModel} and HTTP response
     */
    getFoldersByIDWithHttpInfo(id, opts) {
      opts = opts || {}
      let postBody = null

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFoldersByID")
      }


      let pathParams = {
        'id': id
      }
      let queryParams = {
        'levels': opts['levels'],
        'locale': opts['locale']
      }
      let headerParams = {
      }
      let formParams = {
      }

      let authNames = ['client_id', 'customers_auth']
      let contentTypes = ['application/json', 'text/xml', 'application/xml']
      let accepts = ['application/json', 'text/xml', 'application/xml']
      let returnType = ContentFolderModel

      return this.apiClient.callApi(
        '/folders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      )
    }

    /**
     * To access a content folder, you construct a URL using the template shown below. This template requires you to  specify a content folder id and a subfolder level. In response, the server returns a corresponding content  folder document. Only content folder, which are marked as online are returned.
     * @param {String} id The id of the requested content folder.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContentFolderModel}
     */
    getFoldersByID(id, opts) {
      return this.getFoldersByIDWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data
        })
    }


    /**
     * @param {Array.<String>} ids 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ContentFolderResultModel} and HTTP response
     */
    getFoldersByIDsWithHttpInfo(ids, opts) {
      opts = opts || {}
      let postBody = null

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getFoldersByIDs")
      }


      let pathParams = {
        'ids': ids
      }
      let queryParams = {
        'levels': opts['levels'],
        'locale': opts['locale']
      }
      let headerParams = {
      }
      let formParams = {
      }

      let authNames = ['client_id', 'customers_auth']
      let contentTypes = ['application/json', 'text/xml', 'application/xml']
      let accepts = ['application/json', 'text/xml', 'application/xml']
      let returnType = ContentFolderResultModel

      return this.apiClient.callApi(
        '/folders/({ids})', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      )
    }

    /**
     * @param {Array.<String>} ids 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels 
     * @param {String} opts.locale 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ContentFolderResultModel}
     */
    getFoldersByIDs(ids, opts) {
      return this.getFoldersByIDsWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data
        })
    }


}
